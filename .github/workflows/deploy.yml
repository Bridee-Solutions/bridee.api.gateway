name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{steps.generate_tag.outputs.sha}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generating tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Configure aws credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{secrets.AWS_ACCESS_KEY}}"
          aws-secret-access-key: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          aws-session-token: "${{secrets.AWS_SESSION_TOKEN}}"
          aws-region: "${{secrets.AWS_REGION}}"

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push
        id: docker-image
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          TAG: ${{steps.generate_tag.outputs.sha}}
        run: |
          docker build -t $REGISTRY/bridee-api-gateway:$TAG .
          docker tag $REGISTRY/bridee-api-gateway:$TAG $REGISTRY/bridee-api-gateway:latest
          docker push --all-tags $REGISTRY/bridee-api-gateway
  deploy:
    runs-on: self-hosted
    needs: build
    if: success()
    steps:
      - name: Checkout actions
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{secrets.AWS_ACCESS_KEY}}"
          aws-secret-access-key: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          aws-session-token: "${{secrets.AWS_SESSION_TOKEN}}"
          aws-region: "${{secrets.AWS_REGION}}"

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Stop Docker container
        run: |
          CONTAINER_NAME=$(docker ps -q --filter "name=api-gateway")
          if [ ! -z "$CONTAINER_NAME" ]; then
            docker stop $CONTAINER_NAME
          fi

      - name: Remove Docker container
        run: |
          CONTAINER_NAME=$(docker ps -a -q --filter "name=api-gateway")
          if [ ! -z "$CONTAINER_NAME" ]; then
            docker rm $CONTAINER_NAME
          fi

      - name: deploy
        env:
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          TAG: ${{needs.build.outputs.image-tag}}
        run: |
          docker rmi $REGISTRY/bridee-api-gateway:latest || true
          docker pull $REGISTRY/bridee-api-gateway:latest
          docker run --name api-gateway -d -p 80:80 $REGISTRY/bridee-api-gateway:latest